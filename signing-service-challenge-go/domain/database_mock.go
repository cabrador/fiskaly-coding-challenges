// Code generated by MockGen. DO NOT EDIT.
// Source: database.go
//
// Generated by this command:
//
//	mockgen -source database.go -destination database_mock.go -package domain
//

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	types "github.com/fiskaly/coding-challenges/signing-service-challenge/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreateSignatureDevice mocks base method.
func (m *MockDatabase) CreateSignatureDevice(device *types.SignatureDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignatureDevice", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSignatureDevice indicates an expected call of CreateSignatureDevice.
func (mr *MockDatabaseMockRecorder) CreateSignatureDevice(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignatureDevice", reflect.TypeOf((*MockDatabase)(nil).CreateSignatureDevice), device)
}

// GetAllSignatureDevices mocks base method.
func (m *MockDatabase) GetAllSignatureDevices() []*types.SignatureDevice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSignatureDevices")
	ret0, _ := ret[0].([]*types.SignatureDevice)
	return ret0
}

// GetAllSignatureDevices indicates an expected call of GetAllSignatureDevices.
func (mr *MockDatabaseMockRecorder) GetAllSignatureDevices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSignatureDevices", reflect.TypeOf((*MockDatabase)(nil).GetAllSignatureDevices))
}

// GetDeviceSignatures mocks base method.
func (m *MockDatabase) GetDeviceSignatures(id string) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSignatures", id)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceSignatures indicates an expected call of GetDeviceSignatures.
func (mr *MockDatabaseMockRecorder) GetDeviceSignatures(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceSignatures", reflect.TypeOf((*MockDatabase)(nil).GetDeviceSignatures), id)
}

// GetSignatureDevice mocks base method.
func (m *MockDatabase) GetSignatureDevice(id string) (*types.SignatureDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignatureDevice", id)
	ret0, _ := ret[0].(*types.SignatureDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignatureDevice indicates an expected call of GetSignatureDevice.
func (mr *MockDatabaseMockRecorder) GetSignatureDevice(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignatureDevice", reflect.TypeOf((*MockDatabase)(nil).GetSignatureDevice), id)
}

// UpdateSignatureDevice mocks base method.
func (m *MockDatabase) UpdateSignatureDevice(updatedDevice *types.SignatureDevice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSignatureDevice", updatedDevice)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSignatureDevice indicates an expected call of UpdateSignatureDevice.
func (mr *MockDatabaseMockRecorder) UpdateSignatureDevice(updatedDevice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSignatureDevice", reflect.TypeOf((*MockDatabase)(nil).UpdateSignatureDevice), updatedDevice)
}
